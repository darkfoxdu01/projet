import java.math.BigInteger;
public class RSA {
	public static void main(String[] str){
		new RSA();
	}
	
	public RSA() {
		String message = "BONJOUR";
		char mes[] = convertirASCII(message);
		int mesASC[] = new int[longueur];
		for(int i=0; i<message.length();i++){
			 mesASC[i] = (int)mes[i];
			 System.out.println(mesASC[i]);
		}
		p = new BigInteger(String.valueOf(97));
		q = new BigInteger(String.valueOf(109));
		n = q.multiply(p);
		System.out.println(n);
		c = clefpub();
		clefprivee();
		BigInteger r = new BigInteger("0");
		r = crypter(mesASC);
		r.toString();
		System.out.println("Code a envoyer" + r);
		
		
	}
	
	BigInteger p = new BigInteger("0");
	BigInteger q = new BigInteger("0");
	BigInteger n = new BigInteger("0");
	BigInteger c = new BigInteger("0");
	BigInteger v = new BigInteger("0");
	BigInteger cleprive = new BigInteger("0");
	int longueur;
	
	
	
	public char[] convertirASCII(String message) {
		longueur = message.length();
		char tableau[] = new char[longueur];
		for(int i=0;i<longueur;i++) {         //message.toCharArray();
			tableau[i] = message.charAt(i);				
		}
		
		
		return tableau;
	}
	
	public BigInteger clefpub() {
		BigInteger d = new BigInteger("0");
		BigInteger e = new BigInteger("0");
		BigInteger k = new BigInteger("0");
		Boolean b = true; 
		k =new BigInteger(String.valueOf(2));
		c = new BigInteger(String.valueOf(3));
		v =(q.add(new BigInteger("-1"))).multiply((p.add(new BigInteger("-1"))));
		System.out.println(v);
		
		while ( b && v.compareTo(c) >= 1) { // recherche du premier nombre entier qui soit premier avec (p-1)(q-1)
			
			
			d = v;
			e = c;
			
			
			while (k.compareTo(new BigInteger("1")) <= 0) { // Division Euclidienne
				
				
				k = d.mod(e);
				d = e;
				e = k;
			}
			
			
			if (k.compareTo(new BigInteger("0")) == 0) { // Non premier
				c = c.add(new BigInteger("2"));
			}
			else { 
				b = false;// le PGCD est égale a 1 donc les deux nombres sont premier entre eux
				System.out.println("Res :" + c);
			}	
		}
		
		return c;
	}

	
	public BigInteger crypter(int mesASC[]) {
		BigInteger r = new BigInteger("0");
		r = new BigInteger(String.valueOf(1));
		BigInteger a = new BigInteger("0");		
		BigInteger o = new BigInteger("0");
		o = new BigInteger(String.valueOf(0));
		
		for ( int i=0;c.compareTo(o) == 0;i++) {// modulo du message^c par n
			
			a = new BigInteger(String.valueOf(mesASC[i]));
			r = r.multiply(a);
			r = r.mod(n);
			o = new BigInteger(String.valueOf(i+1));
			System.out.println(r);
			
			}
		
		System.out.println("Code a envoyer" +r);
		return r;
		}

	public void clefprivee() {
		
		BigInteger j = new BigInteger("0");
		j = new BigInteger(String.valueOf(1));
		BigInteger comparaison1 = new BigInteger("0");
		comparaison1 = new BigInteger(String.valueOf(0));
		
		while ((j.mod(c)).compareTo(comparaison1) != 0){
			j = j.add(v);
					}
		
		cleprive = j.divide(c);
		System.out.println("cléprivée"+cleprive);
		}
	}
