import java.math.BigInteger;
public class RSA {
	public static void main(String[] str){
		new RSA();
	}
	
	public RSA() {
		String message = "BONJOUR";
		char mes[] = convertirASCII(message);
		
		int mesASC[] = new int[longueur];
		for(int i=0; i<message.length();i++){
			
			 mesASC[i] = (int)mes[i];
			 System.out.println(mesASC[i]);
		}
		
		p = new BigInteger(String.valueOf(97));
		q = new BigInteger(String.valueOf(109));
		n = q.multiply(p);
		v =(q.add(new BigInteger("-1"))).multiply((p.add(new BigInteger("-1"))));
		System.out.println(v);
		System.out.println(n);
		
		u = clefpub();
		
		y = clefprivee();
		String l = y.toString();
		int d = Integer.parseInt(l);
		
		BigInteger Crypter[] = new BigInteger[longueur];
		Crypter = crypter(mesASC);
		
		decrypter(Crypter,d);
		
	}
	
	
	BigInteger p = new BigInteger("0");
	BigInteger y = new BigInteger("0");
	BigInteger u = new BigInteger("0");
	BigInteger q = new BigInteger("0");
	BigInteger n = new BigInteger("0");
	BigInteger c = new BigInteger("0");
	BigInteger v = new BigInteger("0");
	BigInteger cleprive = new BigInteger("0");
	int longueur;
	
	
	
	public char[] convertirASCII(String message) {
		
		longueur = message.length();
		char tableau[] = new char[longueur];
		for(int i=0;i<longueur;i++) {         //message.toCharArray();
			tableau[i] = message.charAt(i);	
			
		}
		
		return tableau;
		
	}
	
	
	
	public BigInteger clefpub() {
		
		BigInteger k = new BigInteger("0");
		Boolean b = true; 
		k =new BigInteger("0");
		c = new BigInteger(String.valueOf(3));
		
		
		while ( b && c.compareTo(v) <= 0) { // recherche du premier nombre entier qui soit premier avec (p-1)(q-1)
			
			
			k = c.gcd(v);
			if (k.compareTo(new BigInteger("1")) != 0) {// Non premier
				
				c = c.add(new BigInteger("2"));
				
			}
			
			else { 
				
				System.out.println("boucle else");
				b = false;// le PGCD est égale a 1 donc les deux nombres sont premier entre eux
				System.out.println("Res :" + c);
				
			}	
			
		}
		
		return c;
		
	}

	
	public BigInteger[] crypter(int mesASC[]) {
	
		BigInteger codee[] = new BigInteger[longueur];
		
		for (int i=0;i<longueur;i++) {
			
			BigInteger r = new BigInteger("0");
			r = new BigInteger(String.valueOf(1));
			BigInteger a = new BigInteger("0");		
			BigInteger o = new BigInteger("0");
			o = new BigInteger(String.valueOf(0));
			a = new BigInteger(String.valueOf(mesASC[i]));
			
			for ( int j=0;c.compareTo(o) == 1;j++) {// modulo du message^c par n	
				
				r = r.multiply(a);
				r = r.mod(n);
				codee[i] = r;
				o = new BigInteger(String.valueOf(j+1));
				
		}
			
			System.out.println("Code a envoyer=" + r);
			
			}
		
		return codee;
		
		}
	
	

	public BigInteger clefprivee() {
		
		BigInteger j = new BigInteger("0");
		j = new BigInteger(String.valueOf(1));
		j = j.add(v);
		while ((j.remainder(u)).compareTo(new BigInteger("0")) != 0) {
			
			j = j.add(v);
			System.out.println(j);
			
				}	
		
		cleprive = j.divide(u);
		System.out.println("clé privée"+":"+ cleprive);
		return cleprive;
		
		}
	
	
	public void decrypter(BigInteger Crypter[], int d) {
		
		System.out.println(n);
		BigInteger decrypter[] = new BigInteger[longueur];
		
		for (int i=0;i<longueur;i++) {
			
			BigInteger o = new BigInteger("0");
			o = new BigInteger(String.valueOf(0));
			BigInteger a = new BigInteger("0");		
			a = new BigInteger(String.valueOf(Crypter[i]));
			
			while((((a.pow(d)).subtract(o)).mod(n)).compareTo(new BigInteger("0")) != 0) {
				
				o = o.add(new BigInteger("1"));
				
			}
			
			decrypter[i] = o;
			System.out.println("message:" + o);
		
		}
	}
}
